#+title: Emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Custom File Settings

Separate custom file or Emacs will mess the =init.el= file.

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

* Basic Settings

** Remove All the GUI

Remove GUI parts to keep a minimal & TUI look.

#+begin_src emacs-lisp
  (scroll-bar-mode -1) ;; Turn off scroll bar
  (tool-bar-mode -1) ;; Turn off tool bar
  (menu-bar-mode -1) ;; Turn off menu bar
  (tooltip-mode -1) ;; Turn off tooltips 
  (set-fringe-mode 10) ;; Set left & right blank to 10 pixels
#+end_src

Also, we should remove startup message.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

** Font Settings

I use JetBrains Mono Font without ligatures for codes.
For CJK fonts, I use Noto Sans.

#+begin_src emacs-lisp
  (defun mine/font-settings ()
    (set-face-attribute 'default nil :font "JetBrainsMonoNL Nerd Font Propo")
    (set-face-attribute 'variable-pitch nil :font "Noto Sans CJK SC")
    (set-fontset-font t 'han "Noto Sans CJK SC")
    (set-fontset-font t 'kana "Noto Sans CJK JP")
    (set-fontset-font t 'cjk-misc "Noto Sans CJK JP"))

  (add-hook 'server-after-make-frame-hook #'mine/font-settings) ;; For client mode
  (mine/font-settings) ;; For GUI mode
#+end_src

** Split Settings

Always split horizonaly (vsplit).

#+begin_src emacs-lisp
  (setq split-width-threshold 0)
  (setq split-height-threshold nil)
#+end_src

** Background Transparency

#+begin_src emacs-lisp
;; Set frame transparency
(set-frame-parameter (selected-frame) 'alpha '(95 . 95))
(add-to-list 'default-frame-alist '(alpha . (95 . 95)))
(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

** Column Number

Enable column number globally. Disable it for certain modes.

#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (dolist (mode '(org-mode-hook
  		vterm-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Minibuffer

Enabel minibuffer in minibuffers.

#+begin_src emacs-lisp
  (setq enable-recursive-minibuffers t)
#+end_src

Hide commands in =M-x= which do not work in the current mode.
#+begin_src emacs-lisp
    (setq read-extended-command-predicate #'command-completion-default-include-p)
  #+end_src

* Set up Package Source

Use =use-package= for package management.

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
  			 ("org" . "https:/orgmode.org/elpa/")
  			 ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** Auto update

#+begin_src emacs-lisp
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results nil)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
#+end_src

* Backup setting

Backups are saved in a certain folder without messing normal files.

#+begin_src emacs-lisp
  (defvar --backup-directory (concat user-emacs-directory "backups"))
  (if (not (file-exists-p --backup-directory))
      (make-directory --backup-directory t))
  (setq backup-directory-alist `(("." . ,--backup-directory)))
  (setq make-backup-files t               ; backup of a file the first time it is saved.
        backup-by-copying t               ; don't clobber symlinks
        version-control t                 ; version numbers for backup files
        delete-old-versions t             ; delete excess backup files silently
        delete-by-moving-to-trash t
        kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
        kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
        auto-save-default t               ; auto-save every buffer that visits a file
        auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
        auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
        )
#+end_src

* Themes

** Doom themes

Use doom-themes as the theme source. This codeblock is copied from the
official README, be careful with problems.

#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-solarized-light t) ; use solarized light theme

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

** Icons

Load nerd icons. May not needed.

#+begin_src emacs-lisp
  (use-package nerd-icons)
#+end_src

** Rainbow delimiters

Change parens color to be rainbow. Extremely important for lisp.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Keybindings

** ESC

Map =<escape>= to the same function as =<C-g>=. A good habit from vim.

#+begin_src emacs-lisp
  (keymap-global-set "<escape>" 'keyboard-escape-quit)
#+end_src

** Evil

Use Evil mode to bring back beloved vim editing experience.

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode)
    :custom
    (evil-respect-visual-line-mode 1)
    (evil-undo-system 'undo-redo))
#+end_src

Use evil collection for most mode compatibility.

#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

** General

Use general to get vim style leader key keybindings.

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup t)
    (general-create-definer mine/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC") ;; <C-SPC> is contradict to fcitx5 default settings, should turn off fcitx5 in most cases

    (mine/leader-keys
      "o" '(:ignore o :which-key "org-mode")
      "oa" '(org-agenda :which-key "org-agenda")
      "or" '(org-redisplay-inline-images :which-key "redisplay inline images")
      "ol" '(org-latex-preview :which-key "preview LaTeX")

      "t" '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose-theme")))
#+end_src

* Completion

** Vertico

[[https://github.com/minad/vertico][Vertico]] is a minibuffer completion system.

#+begin_src emacs-lisp
  (use-package vertico
    :diminish
    :init
    (vertico-mode 1)
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous))
    :custom
    (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
    )
#+end_src

Orderless is for the fuzzy completion.

#+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Consult

[[https://github.com/minad/consult][Consult]] replace many default functions like =<M-x>= to a better vertico compatible version.

#+begin_src emacs-lisp
     (use-package consult
       :bind (("C-x b" . consult-buffer)
  	    ("C-s" . consult-line)))
#+end_src

** Corfu

[[https://github.com/minad/corfu][Corfu]] is a in-buffer completion.

#+begin_src emacs-lisp
  (use-package corfu
    :hook
    (lsp-mode . corfu-mode)
    (ledger-mode . corfu-mode)
    :custom
    (corfu-auto t)
    (corfu-auto-prefix 1)
    (corfu-auto-delay 0.1)
    :config
    (keymap-unset corfu-map "RET"))
#+end_src

*** Icons

#+begin_src emacs-lisp
  (use-package nerd-icons-corfu
    :after corfu
    :config
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

* Help

** Which key

Which shows key descriptions for most compatible key-bindings. Very useful for learn a new package or setup.

#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

** Helpful

Helpful is a help page rewriter that provides more functionalities.

#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

* Development

** Languages

*** LSP

Use lsp-mode for lsp functionalities.

#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    (defun mine/lsp-mode-setup-completion ()
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
            '(orderless))) ;; Configure orderless
    :hook
    (lsp-completion-mode . mine/lsp-mode-setup-completion)
    :config
    (lsp-enable-which-key-integration t)
    :custom
    (lsp-completion-provider :none)
    (lsp-idle-delay 0.2))
#+end_src

**** LSP-UI

Use lsp-ui for sideline diagnostics. Note that it need more configurations.

#+begin_src emacs-lisp
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode))
#+end_src

*** Python

Load venv.

#+begin_src emacs-lisp
  (use-package python
    :custom
    (python-shell-virtualenv-root "~/venv"))
#+end_src

Load pyright for lsp.

#+begin_src emacs-lisp
  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp-deferred))))
#+end_src

** Flycheck

Use flycheck to handle diagnostics.

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode)
    (flymake-mode -1)
    :custom
    (lsp-diagnostics-provider :flycheck))
#+end_src

** Folding

Use origami to handle code folding

#+begin_src emacs-lisp
  (use-package origami
    :hook (prog-mode . origami-mode))
#+end_src

** Magit

Magit is a magical git interface for Emacs.

#+begin_src emacs-lisp
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** Projectile

Use projectile for project management. (Rarely used)

#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map))
#+end_src

* Org-mode

** Main

Org-mode hook

#+begin_src emacs-lisp
  (defun mine/org-mode-setup ()
    (org-indent-mode)
    (auto-fill-mode 0)
    (display-line-numbers-mode 0)
    (setq evil-auto-intent nil)
    (setq word-wrap-by-category t))
#+end_src

Main org-mode config.
Look at comments for explanation.

#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . mine/org-mode-setup)
    :custom
    ;; ==============
    ;; === Agenda ===
    ;; ==============
    ;; Basic Setting
    (org-agenda-files
     '("~/Documents/Notes/"))
    (org-agenda-start-with-log-mode t)
    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-refile-targets
     '(("archive.org" :maxlevel . 1)))

    ;; Customs
    (org-agenda-custom-commands
     '(("d" "Dashboard" ;;Agenda Dashboard
        ((agenda "" ((org-deadline-warning-days 7)))
         (todo "TODO"
  	     ((org-agenda-overriding-header "All Tasks")))))))

    ;; =============
    ;; === Latex ===
    ;; =============
    (org-preview-latex-default-process 'dvisvgm)
    (org-format-latex-options '(:scale 0.4))

    :config
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    ;; =============
    ;; === Habit ===
    ;; =============
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    ;; =============
    ;; === Tempo ===
    ;; =============
    (require 'org-tempo)
    (add-to-list 'org-modules 'org-tempo)
    (add-to-list 'org-structure-template-alist
  	       '("el" . "src emacs-lisp"))

    ;; =============
    ;; === Babel ===
    ;; =============
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (shell . t))))
#+end_src

** Auto tangle config

Config org-babel-tangle to auto export this file to =init.el=.

#+begin_src emacs-lisp
  (defun mine/org-babel-tangle-config ()
    (when (file-equal-p (file-name-directory (buffer-file-name))
  		      (expand-file-name "~/.emacs.d"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'mine/org-babel-tangle-config)))
#+end_src

* Ledger-mode

Ledger mode is for ledger, a plain text accounting tool.

#+begin_src emacs-lisp
  (use-package ledger-mode
    :init
    (setq ledger-clear-whole-transactions 1)
    :config
    (add-to-list 'evil-emacs-state-modes 'ledger-report-mode)
    :mode "\\.ledger\\'")
#+end_src

* Command Line

** VTerm

Use vterm for most terminal fuctions.

#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :config
    (setq vterm-shell "/bin/fish")
    (setq term-prompt-regexp "^❯ *") ;; This works not as intended
    (setq vterm-max-scrollback 10000))
#+end_src

* File Management

** Dired

Dired is the default file management utility for emacs and it works well in most cases.

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom 
    (dired-kill-when-opening-new-dired-buffer t)
    (dired-listing-switches "-agho --group-directories-first")
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file))
#+end_src

*** Icons

To have icons in dired, nerd-icons-dired is needed.

#+begin_src emacs-lisp
  (use-package nerd-icons-dired
    :hook (dired-mode . nerd-icons-dired-mode))
#+end_src

*** Git ignore
#+begin_src emacs-lisp
  (use-package dired-gitignore
    :config
    (dired-gitignore-global-mode t))
#+end_src

* Visual

** Modeline

Doom modeline is a good looking modeline for Emacs.
The default behavior is good enough.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src

** Fill Column

Visual-fill-column is used for display org-mode and latex-mode contents in the middle of screen.

#+begin_src emacs-lisp
  (defun mine/visual-fill-setup ()
    (setq visual-fill-column-width 80
  	visual-fill-column-center-text t)
    (visual-fill-column-mode 1)
    (visual-line-mode))
  (use-package visual-fill-column
    :defer t
    :hook ((org-mode latex-mode) . mine/visual-fill-setup))
#+end_src

* Input Methond

** Rime

Use rime for Chinese input.

#+begin_src emacs-lisp
  (use-package rime
    :custom
    (default-input-method "rime")
    (rime-show-candidate 'posframe)
    (rime-posframe-style 'vertical)
    (rime-posframe-properties (list :internal-border-width 10
  				  :font "Noto Sans CJK SC Bold")))
#+end_src

