#+title: Emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Custom File Settings
Separate custom file or Emacs will mess the =init.el= file.
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src
* Basic UI Settings
** Remove all the GUI
#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
#+end_src
Also, we should remove startup message.
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src
** Font settings
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "JetBrainsMonoNL Nerd Font Propo")
  (set-face-attribute 'variable-pitch nil :font "Noto Sans CJK SC")
  (set-fontset-font t 'han "Noto Sans CJK SC")
  (set-fontset-font t 'kana "Noto Sans CJK JP")
  (set-fontset-font t 'cjk-misc "Noto Sans CJK JP")
#+end_src
** Always split horizonally
This codeblock may not work as intended.
#+begin_src emacs-lisp
  (setq spilt-width-threshold 0)
  (setq spilt-height-threshold nil)
#+end_src
** Display column number
#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (dolist (mode '(org-mode-hook
  		term-mode-hook
  		shell-mode-hook
  		eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
* Set up package source
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
  			 ("org" . "https:/orgmode.org/elpa/")
  			 ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src
* Backup setting
Change the backup behavior.
Backups should be saved in a certain folder without messing normal files.
#+begin_src emacs-lisp
  (defvar --backup-directory (concat user-emacs-directory "backups"))
  (if (not (file-exists-p --backup-directory))
      (make-directory --backup-directory t))
  (setq backup-directory-alist `(("." . ,--backup-directory)))
  (setq make-backup-files t               ; backup of a file the first time it is saved.
        backup-by-copying t               ; don't clobber symlinks
        version-control t                 ; version numbers for backup files
        delete-old-versions t             ; delete excess backup files silently
        delete-by-moving-to-trash t
        kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
        kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
        auto-save-default t               ; auto-save every buffer that visits a file
        auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
        auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
        )
#+end_src
* Themes
** Doom themes
Use doom-themes as the theme source. This codeblock is copied from the
official README, be careful with problems.
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-solarized-light t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src
** Icons
#+begin_src emacs-lisp
(use-package nerd-icons)
#+end_src
** Rainbow delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
* Ivy
** Ivy
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
  	 :map ivy-minibuffer-map
  	 ("TAB" . ivy-alt-done)
  	 ("C-l" . ivy-alt-done)
  	 ("C-j" . ivy-next-line)
  	 ("C-k" . ivy-previous-line)
  	 :map ivy-switch-buffer-map
  	 ("C-k" . ivy-previous-line)
  	 ("C-l" . ivy-done)
  	 ("C-d" . ivy-switch-buffer-kill)
  	 :map ivy-reverse-i-search-map
  	 ("C-k" . ivy-previous-line)
  	 ("C-d" . ivy-reverse-i-search-kill))
    :init
    (ivy-mode 1))
#+end_src
** Counsel
#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
  	 ("C-x b" . counsel-ibuffer)
  	 ("C-x C-f" . counsel-find-file)
  	 :map minibuffer-local-map
  	 ("C-r" . 'counsel-minibuffer-history))
    :custom
    (ivy-initial-inputs-alist nil))
#+end_src
** Ivy-rich
#+begin_src emacs-lisp
  (use-package ivy-rich
    :init (ivy-rich-mode 1))
#+end_src
* Help
** Which key
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))
#+end_src
** Helpful
#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src
* Project
** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map))
#+end_src
** Magit
#+begin_src emacs-lisp
(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
* Org-mode
** Main
Org-mode hook
#+begin_src emacs-lisp
  (defun mine/org-mode-setup ()
    (org-indent-mode)
    (auto-fill-mode 0)
    (display-line-numbers-mode 0)
    (setq evil-auto-intent nil)
    (setq word-wrap-by-category t))
#+end_src
Main org-mode config.
#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . mine/org-mode-setup)
    :custom
    ;; ==============
    ;; === Agenda ===
    ;; ==============
    ;; Basic Setting
    (org-agenda-files
     '("~/Documents/Notes/"))
    (org-agenda-start-with-log-mode t)
    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-refile-targets
     '(("archive.org" :maxlevel . 1)))

    ;; Customs
    (org-agenda-custom-commands
     '(("d" "Dashboard" ;;Agenda Dashboard
        ((agenda "" ((org-deadline-warning-days 7)))
         (todo "TODO"
  	     ((org-agenda-overriding-header "All Tasks")))))))

    ;; =============
    ;; === Latex ===
    ;; =============
    (org-preview-latex-default-process 'dvisvgm)
    (org-format-latex-options '(:scale 0.4))

    :config
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    ;; =============
    ;; === Habit ===
    ;; =============
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    ;; =============
    ;; === Tempo ===
    ;; =============
    (require 'org-tempo)
    (add-to-list 'org-modules 'org-tempo)
    (add-to-list 'org-structure-template-alist
  	       '("el" . "src emacs-lisp"))

    ;; =============
    ;; === Babel ===
    ;; =============
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (shell . t))))
#+end_src

** Auto tangle config
#+begin_src emacs-lisp
  (defun mine/org-babel-tangle-config ()
    (when (file-equal-p (buffer-file-name)
  		      (expand-file-name "~/.emacs.d/init.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'mine/org-babel-tangle-config)))
#+end_src
* Ledger-mode
** Main
#+begin_src emacs-lisp
  (use-package ledger-mode
    :init
    (setq ledger-clear-whole-transactions 1)
    :config
    (add-to-list 'evil-emacs-state-modes 'ledger-report-mode)
    :mode "\\.ledger\\'")
#+end_src
* Command Line
** Term-mode
#+begin_src emacs-lisp
  (use-package term
    :config
    (setq explicit-shell-file-name "fish")
    (setq term-prompt-regexp "^❯ *"))
#+end_src
** VTerm
#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :config
    (setq vterm-shell "/bin/fish")
    (setq term-prompt-regexp "^❯ *")
    (setq vterm-max-scrollback 10000))
#+end_src
* File Management
** Dired
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom 
    (dired-kill-when-opening-new-dired-buffer t)
    (dired-listing-switches "-agho --group-directories-first")
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file))
#+end_src
*** Icons
#+begin_src emacs-lisp
  (use-package nerd-icons-dired
    :hook (dired-mode . nerd-icons-dired-mode))
#+end_src
* Visual
** Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src
** Fill Column
#+begin_src emacs-lisp
  (defun mine/visual-fill-setup ()
    (setq visual-fill-column-width 80
  	visual-fill-column-center-text t)
    (visual-fill-column-mode 1)
    (visual-line-mode))
  (use-package visual-fill-column
    :defer t
    :hook ((org-mode latex-mode) . mine/visual-fill-setup))
#+end_src
* Input Methond
** Rime
#+begin_src emacs-lisp
  (use-package rime
    :custom
    (default-input-method "rime")
    (rime-show-candidate 'posframe)
    (rime-posframe-style 'vertical)
    (rime-posframe-properties (list :internal-border-width 10
  				  :font "Noto Sans CJK SC Bold")))
#+end_src
* Keybindings
** ESC
#+begin_src emacs-lisp
  (keymap-global-set "<escape>" 'keyboard-escape-quit)
#+end_src
** Evil
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode)
    :custom
    (evil-respect-visual-line-mode 1)
    (evil-undo-system 'undo-redo))
#+end_src
Use evil collection for most mode compatibility.
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src
** General
Use general to get vim style leader key keybindings.
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup t)
    (general-create-definer mine/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (mine/leader-keys
      "o" '(:ignore o :which-key "Org-mode")
  	"oa" '(org-agenda :which-key "Org-agenda")))
      "t" '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose-theme")
#+end_src
