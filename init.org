#+title: Emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./emacs/.emacs.d/init.el

* Set Custom File

Separate custom file or Emacs will mess the =init.el= file.

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

* Basic Settings

** Remove All the GUI

Remove GUI parts to keep a minimal & TUI look.

#+begin_src emacs-lisp
  (scroll-bar-mode -1) ;; Turn off scroll bar
  (tool-bar-mode -1) ;; Turn off tool bar
  (menu-bar-mode -1) ;; Turn off menu bar
  (tooltip-mode -1) ;; Turn off tooltips 
  (set-fringe-mode 10) ;; Set left & right blank to 10 pixels
#+end_src

Also, remove startup message.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

** Font Settings

Use the default fonts.

#+begin_src emacs-lisp
    (defun mine/font-settings ()
      (set-face-attribute 'default nil :font "monospace")
      (set-face-attribute 'variable-pitch nil :font "sans")
      (set-fontset-font t 'han "monospace")
      (set-fontset-font t 'kana "monospace")
      (set-fontset-font t 'cjk-misc "monospace")
      (set-fontset-font t 'symbol "monospace"))

    (add-hook 'server-after-make-frame-hook #'mine/font-settings) ;; For client mode
    (mine/font-settings) ;; For GUI mode
#+end_src

** Column Number

Enable column number globally. Disable it for certain modes.

#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (dolist (mode '(org-mode-hook
  		eshell-mode-hook
  		vterm-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Minibuffer

Enabel minibuffer in minibuffers.

#+begin_src emacs-lisp
  (setq enable-recursive-minibuffers t)
#+end_src

Hide commands in =M-x= which do not work in the current mode.

#+begin_src emacs-lisp
    (setq read-extended-command-predicate #'command-completion-default-include-p)
  #+end_src

* Set up Package Source

Use =use-package= for package management.

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
  			 ("org" . "https:/orgmode.org/elpa/")
  			 ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
  (setq use-package-compute-statistics t)
#+end_src

** Auto update

#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results nil)
    (auto-package-update-delete-old-versions t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))
#+end_src

* Backup setting

Backups are saved in a certain folder without messing normal files.

#+begin_src emacs-lisp
  (defvar --backup-directory (concat user-emacs-directory "backups"))
  (if (not (file-exists-p --backup-directory))
      (make-directory --backup-directory t))
  (setq backup-directory-alist `(("." . ,--backup-directory)))
  (setq make-backup-files t               ; backup of a file the first time it is saved.
        backup-by-copying t               ; don't clobber symlinks
        version-control t                 ; version numbers for backup files
        delete-old-versions t             ; delete excess backup files silently
        delete-by-moving-to-trash t
        kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
        kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
        auto-save-default t               ; auto-save every buffer that visits a file
        auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
        auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
        )
#+end_src

* Themes

** Doom themes

Use [[https://github.com/doomemacs/themes][doom-themes]] as the theme source.

#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-solarized-light t) ; use solarized light theme

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

** Icons

Load [[https://github.com/rainstormstudio/nerd-icons.el][nerd icons]]. May not needed.

#+begin_src emacs-lisp
  (use-package nerd-icons)
#+end_src

** Rainbow delimiters

Change parens color to be [[https://github.com/Fanael/rainbow-delimiters][rainbow]]. Extremely important for lisp.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Keybindings

** ESC

Map =<escape>= to the same function as =<C-g>=. A good habit from vim.

#+begin_src emacs-lisp
  (keymap-global-set "<escape>" 'keyboard-escape-quit)
#+end_src

** Evil

Use Evil mode to bring back beloved vim editing experience.

#+begin_src emacs-lisp :tangle yes
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode)
    :custom
    (evil-respect-visual-line-mode 1)
    (evil-undo-system 'undo-redo))
#+end_src

Use evil collection for most mode compatibility.

#+begin_src emacs-lisp :tangle yes
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda () (setq evil-auto-indent nil)))
#+end_src

** General

Use general to get vim style leader key keybindings.

#+begin_src emacs-lisp :tangle yes
  (use-package general
    :config
    (general-evil-setup t)
    (general-create-definer mine/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC") ;; <C-SPC> is contradict to fcitx5 default settings, should turn off fcitx5 in most cases

    (mine/leader-keys
      "l" '(:ignore t :which-key "ledger-mode")
      "lr" '(ledger-report
  	   :which-key "report")
      
      "o" '(:ignore t :which-key "org-mode")
      "oa" '(org-agenda
             :which-key "agenda")
      "or" '(org-redisplay-inline-images
             :which-key "redisplay inline images")
      "ol" '(org-latex-preview
             :which-key "preview LaTeX")
      "oi" '((lambda () (interactive)
               (find-file (concat org-directory "/index.org")))
             :which-key "open index")
      "oc" '(org-capture
  	   :which-key "capture")

      "s" '(:ignore t :which-key "start")
      "se" #'(mine/shell-create
  	    :which-key "start eshell")

      "t" '(:ignore t :which-key "toggles")
      "tt" '(consult-theme
             :which-key "choose-theme")

      "n" '(:ignore t :which-key "org-roam")
      "nf" '(org-roam-node-find :which-key "find a roam node")
      "ni" '(org-roam-node-insert :which-key "insert a roam node")
      "nl" '((lambda () (interactive)
  	      (org-roam-buffer-display-dedicated
  	       (org-roam-node-at-point)))
  	    :which-key "show backlinks")
      "nd" '(:ignore t :which-key "dailies")
      "ndn" '(org-roam-dailies-capture-today
              :which-key "capture today")
      "ndd" '(org-roam-dailies-goto-today
              :which-key "goto today")
      "ndT" '(org-roam-dailies-capture-tomorrow
              :which-key "capture tomorrow")
      "ndt" '(org-roam-dailies-goto-tomorrow
              :which-key "goto tomorrow")
      "ndY" '(org-roam-dailies-capture-yesterday
              :which-key "capture yesterday")
      "ndy" '(org-roam-dailies-goto-yesterday
              :which-key "goto yesterday")

      "x" '(:keymap perspective-map :package perspective)))
#+end_src

* Completion

** Vertico

[[https://github.com/minad/vertico][Vertico]] is a minibuffer completion system.

#+begin_src emacs-lisp
  (use-package vertico
    :diminish
    :init
    (vertico-mode 1)
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous))
    :custom
    (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
    )
#+end_src

Orderless is for the fuzzy completion.

#+begin_src emacs-lisp
  (use-package orderless
    :after vertico
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Consult

[[https://github.com/minad/consult][Consult]] replace many default functions like =<M-x>= to a better vertico compatible version.

#+begin_src emacs-lisp
  (use-package consult
    :bind (("C-x b" . consult-buffer)
  	 ("M-p" . consult-project-buffer)
           ("C-s" . consult-line)))
#+end_src

[[https://github.com/minad/marginalia][Marginalia]] is for more detailed description for consult and vanilla minibuffer switchers.

#+begin_src emacs-lisp
  (use-package marginalia
   :init
   (marginalia-mode 1))
#+end_src

** Corfu

[[https://github.com/minad/corfu][Corfu]] is a in-buffer completion.

#+begin_src emacs-lisp :tangle yes
  (use-package corfu
    :hook
    (prog-mode . corfu-mode)
    (ledger-mode . corfu-mode)
    (eshell-mode . corfu-mode)
    :custom
    (corfu-auto t)
    (corfu-auto-prefix 3)
    (corfu-auto-delay 0.0)
    :config
    (keymap-unset corfu-map "RET"))
#+end_src

*** Icons

#+begin_src emacs-lisp
  (use-package nerd-icons-corfu
    :after corfu
    :config
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

* Help

** Which key

Which shows key descriptions for most compatible key-bindings. Very useful for learn a new package or setup.

#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

** Helpful

Helpful is a help page rewriter that provides more functionalities.

#+begin_src emacs-lisp
  (use-package helpful
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))
#+end_src

* Work groups

** Perspective

=Perspective.el= provides multiple named workspaces.

#+begin_src emacs-lisp
  (use-package perspective
    :bind
    ("C-x C-b" . persp-list-buffers)
    :custom
    (persp-state-default-file (expand-file-name "persp-state" user-emacs-directory))
    (persp-mode-prefix-key (kbd "C-c M-p"))  ; pick your own prefix key here
    :init
    (persp-mode)
    :config
    (add-hook 'kill-emacs-hook #'persp-state-save)
    (add-hook 'after-init-hook
              (lambda () (persp-state-load persp-state-default-file)))
    (with-eval-after-load 'consult
      (consult-customize consult--source-buffer :hidden t :default nil)
      (add-to-list 'consult-buffer-sources persp-consult-source)))
#+end_src

** Tabspace
Tabspace is a convenient wrapper for =tab-bar.el= and =project.el=
#+begin_src emacs-lisp :tangle no
  (use-package tabspaces
    :hook (after-init . tabspaces-mode) ;; use this only if you want the minor-mode loaded at startup. 
    :commands (tabspaces-switch-or-create-workspace
               tabspaces-open-or-create-project-and-workspace)
    :custom
    (tabspaces-use-filtered-buffers-as-default t)
    (tabspaces-default-tab "Default")
    (tabspaces-remove-to-default t)
    (tabspaces-include-buffers '("*scratch*"))
    (tabspaces-initialize-project-with-todo t)
    (tabspaces-todo-file-name "project-todo.org")
    ;; sessions
    (tabspaces-session t)
    (tabspaces-session-auto-restore t)
    (tab-bar-new-tab-choice "*scratch*")
    :config
    ;; Filter Buffers for Consult-Buffer
    (with-eval-after-load 'consult
      ;; hide full buffer list (still available with "b" prefix)
      (consult-customize consult--source-buffer :hidden t :default nil)
      ;; set consult-workspace buffer list
      (defvar consult--source-workspace
        (list :name     "Workspace Buffers"
              :narrow   ?w
              :history  'buffer-name-history
              :category 'buffer
              :state    #'consult--buffer-state
              :default  t
              :items    (lambda () (consult--buffer-query
                                  :predicate #'tabspaces--local-buffer-p
                                  :sort 'visibility
                                  :as #'buffer-name)))

        "Set workspace buffer list for consult-buffer.")
      (add-to-list 'consult-buffer-sources 'consult--source-workspace)))

#+end_src

* Development

** Languages

*** LSP

Use [[https://github.com/joaotavora/eglot][eglot]] for lsp functionalities.

#+begin_src emacs-lisp
  (use-package eglot
    :hook
    (rust-mode . eglot-ensure)
    (python-mode . eglot-ensure)
    :config
    ;; Change the inlay hint face to make it slightly more visible
    (set-face-attribute 'eglot-inlay-hint-face nil :foreground "#8ba34a"))
#+end_src

*** Python

Load venv.

#+begin_src emacs-lisp
  (use-package python
    :mode ("\\.py\\'" . python-mode)
    :interpreter ("python" . python-mode)
    :custom
    (python-shell-virtualenv-root "~/venv"))
#+end_src

*** Rust

#+begin_src emacs-lisp
  (use-package rust-mode)
#+end_src

*** Scheme

#+begin_src emacs-lisp
  (use-package geiser)

  (use-package geiser-guile
    :after geiser
    :custom
    (geiser-active-implementations '(guile))
    (geiser-guile-binary "/usr/bin/guile")
    (geiser-repl-autodoc-p t))

  (use-package paredit
    :hook (scheme-mode . paredit-mode))
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (26606 36645 452935 337000) :init (26606 36645 452932 331000) :config (26606 36645 452920 559000) :config-secs (0 0 3 577000) :init-secs (0 0 555534 615000) :use-package-secs (0 0 555684 40000)))

** Flycheck

Use flycheck to handle diagnostics.

#+begin_src emacs-lisp
  ;; (use-package flycheck
  ;;   :ensure t
  ;;   :init
  ;;   (global-flycheck-mode)
  ;;   (flymake-mode -1)
  ;;   :custom
  ;;   (lsp-diagnostics-provider :flycheck))
#+end_src

** Folding

Use origami to handle code folding

#+begin_src emacs-lisp
  (use-package origami
    :hook (prog-mode . origami-mode))
#+end_src

** Magit

Magit is a magical git interface for Emacs.

#+begin_src emacs-lisp
  (use-package magit
    :commands (magit-status)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** Projectile

Use projectile for project management. (Rarely used)

#+begin_src emacs-lisp :tangle no
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map))
#+end_src

** Eldoc

#+begin_src emacs-lisp
  (use-package eldoc-box
    :config
    (set-face-attribute 'eldoc-box-body nil :font "Sarasa UI CL")
    :hook
    (eglot-managed-mode . eldoc-box-hover-mode))
#+end_src

* Shell

** Eshell

#+begin_src emacs-lisp
  (use-package eshell
    :custom
    (eshell-scroll-to-bottom-on-input t)
    (eshell-history-size 10000)
    (eshell-save-history-on-exit t)
    (eshell-hist-ignoredups t)
    :config
    (setq-local tab-aways-indent 'complete))
#+end_src

This is a function for create new eshell instance:

#+begin_src emacs-lisp
(defun mine/shell-create (name)
   "Create a custom-named eshell buffer with NAME."
   (interactive "sName: ")
   (eshell 'new)
   (let ((new-buffer-name (concat "*eshell-" name "*")))
     (rename-buffer new-buffer-name t)))
#+end_src

** Capf-autosuggest

This is a package provide fish-like inline completion.

#+begin_src emacs-lisp
  (use-package capf-autosuggest
    :hook
    (eshell-mode . capf-autosuggest-mode))
#+end_src

* Org-mode

** Main

Org-mode hook

#+begin_src emacs-lisp
  (defun mine/org-mode-setup ()
    (org-indent-mode)
    (auto-fill-mode 0)
    (display-line-numbers-mode 0)
    ;; (setq evil-auto-intent nil)
    (setq word-wrap-by-category t))
#+end_src

Main org-mode config. Using noweb for sake of simplicity.

#+begin_src emacs-lisp :noweb yes :tangle yes
  (use-package org
    :hook (org-mode . mine/org-mode-setup)
    :custom
    <<Org Agenda Settings>>

    <<Org Capture Templates>>

    (org-preview-latex-default-process 'dvisvgm)
    (org-format-latex-options '(:scale 0.4))
    (org-todo-keywords
     '((sequence "TODO(t)" "|" "DONE(d!)")
       (sequence "TOREAD" "READING" "|" "READ")))

    :config
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    <<Org Habit>>

    <<Org Tempo>>

    <<Org Babel>>)
#+end_src

** Auto tangle config

Config org-babel-tangle to auto export files in =.emacs.d=.

#+begin_src emacs-lisp :tangle yes
  (defun mine/org-babel-tangle-config ()
    (when (file-equal-p (file-name-directory (buffer-file-name))
  		      (expand-file-name "~/.emacs.d"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'mine/org-babel-tangle-config)))
#+end_src

** Agenda

#+Name: Org Agenda Settings
#+begin_src emacs-lisp :tangle no
  (org-agenda-files '("~/org/"))
  (org-agenda-start-with-log-mode t)
  (org-log-done 'time)
  (org-log-into-drawer t)
  (org-refile-targets
   '(("archive.org" :maxlevel . 1)))
  (org-agenda-window-setup 'only-window)

  ;; Customs
  (org-agenda-custom-commands
   '(("d" "Dashboard" ;;Agenda Dashboard
      ((agenda "" ((org-deadline-warning-days 7)))
       (todo "TODO"
  	     ((org-agenda-overriding-header "All Tasks")))))))
#+end_src

** Babel

#+Name: Org Babel
#+begin_src emacs-lisp :tangle no
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (shell . t)))
#+end_src

** Capture

#+Name: Org Capture Templates
#+begin_src emacs-lisp :tangle no
  (org-capture-templates
   '(("t" "Todo" entry (file+headline "~/org/todo.org" "Inbox")
      "* TODO %?")
     ("l" "Literature Note" plain (file "~/org/tmp.org")
      (file "100_Zotero/template.org"))
     ("b" "Toread" entry (file "~/org/booklist.org")
      "* TOREAD %?\n:PROPERTIES:\n:author:\n:rate:\n:END:")))
#+end_src

** Habit

#+Name: Org Habit
#+begin_src emacs-lisp :tangle no
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)
#+end_src

** Tempo

#+Name: Org Tempo
#+begin_src emacs-lisp :tangle no
  (require 'org-tempo)
  (add-to-list 'org-modules 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("cf" . "src conf"))
#+end_src

** Org to clipboard

#+begin_src emacs-lisp
(defun org-to-clipboard ()
  "Convert the contents of the current buffer or region from Org
mode to HTML.   Store the result in the clipboard."
  (interactive)
  (if (use-region-p)
      (shell-command-on-region (region-beginning)
                               (region-end)
                               "org2clip")
      (shell-command-on-region (point-min)
                               (point-max)
                               "org2clip")))
#+end_src

** Org-roam

Customised =org-roam-preview-funtion=, return current line.

#+begin_src emacs-lisp
  (defun mine/org-roam-preview-function ()
      (let* ((elem (org-element-context))
             (parent (org-element-property :parent elem)))
        (string-trim-right (buffer-substring-no-properties
                            (org-element-property :begin parent)
                            (org-element-property :end parent)))))
#+end_src

#+begin_src emacs-lisp

  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (concat org-directory "/roam"))
    (org-roam-completion-everywhere t)
    (org-roam-preview-function #'mine/org-roam-preview-function)
    (org-roam-capture-templates
     '(("d" "default" plain "%?"
        :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("a" "anime" plain (file "~/org/roam/templates/anime.org")
        :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Anime\n#+season: %^{Season}\n#+rating: %^{Rating}\n")
        :unnarrowed t)))
    (org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    :bind
    (("C-M-i" . org-roam-node-insert))
    :config
    (org-roam-setup)
    )
#+end_src

*** Org-roam-ui

#+begin_src emacs-lisp
  (use-package org-roam-ui)
#+end_src

* TeX

#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex
    :custom
    (TeX-auto-save t)
    (TeX-parse-self t)
    :config
    (setq-default TeX-master nil)
    )
#+end_src

* File Management

** Dired

Dired is the default file management utility for emacs and it works well in most cases.

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom 
    (dired-kill-when-opening-new-dired-buffer t)
    (dired-listing-switches "-agho --group-directories-first")
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file))
#+end_src

*** Icons

To have icons in dired, nerd-icons-dired is needed.

#+begin_src emacs-lisp
  (use-package nerd-icons-dired
    :hook (dired-mode . nerd-icons-dired-mode))
#+end_src

*** Git ignore
#+begin_src emacs-lisp
  (use-package dired-gitignore
    :config
    (dired-gitignore-global-mode t))
#+end_src

* Visual

** Modeline

Doom modeline is a good looking modeline for Emacs.
The default behavior is good enough.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src

** Fill Column

Visual-fill-column is used for display org-mode and latex-mode contents in the middle of screen.

#+begin_src emacs-lisp
  (defun mine/visual-fill-setup ()
    (setq visual-fill-column-width 80
  	visual-fill-column-center-text t)
    (visual-fill-column-mode 1)
    (visual-line-mode))
  (use-package visual-fill-column
    :defer t
    :hook ((org-mode LaTeX-mode) . mine/visual-fill-setup))
#+end_src

** Split Settings

Use [[https://github.com/ajgrf/edwina][edwina]] to manage splitting.

#+begin_src emacs-lisp :tangle no
  (use-package edwina
    :config
    (edwina-mode 1))
#+end_src

Small trick to prevent buffers from poppling everywhere:

#+begin_src emacs-lisp :tangle yes
(customize-set-variable 'display-buffer-base-action
  '((display-buffer-reuse-window display-buffer-same-window)
    (reusable-frames . t)))

(customize-set-variable 'even-window-sizes nil)     ; avoid resizing
#+end_src

#+RESULTS:

** Popper

[[https://github.com/karthink/popper][Popper]] provides popup windows for Emacs, which is handy for buffers you need immediately and want them disappear immediately.

#+begin_src emacs-lisp :tangle yes
  (use-package popper
    :ensure t
    :bind (("C-`"   . popper-toggle)
           ("M-`"   . popper-cycle)
           ("C-M-`" . popper-toggle-type))
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "\\*Async Shell Command\\*"
  	  org-roam-mode
            helpful-mode
            eshell-mode
            compilation-mode))
    (popper-mode +1)
    (popper-echo-mode +1))
#+end_src

* Command Line

** VTerm

Use vterm for most terminal fuctions.

#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :custom
    (vterm-timer-delay nil)
    (vterm-max-scrollback 10000)
    (vterm-shell "/bin/fish")
    :config
    (setq term-prompt-regexp "^❯ *") ;; This works not as intended
    )
#+end_src

* Input Methond

** Rime

Use emacs-rime for Chinese input.

#+begin_src emacs-lisp
  (use-package rime
    :bind
    (:map rime-mode-map
          ("C-`" . 'rime-send-keybinding))
    :custom
    (default-input-method "rime")
    (rime-show-candidate 'posframe)
    (rime-posframe-style 'horizonal)
    (rime-posframe-properties (list :internal-border-width 10
                                  :font "Sarasa UI CL Medium")))
#+end_src

* Ledger-mode

Ledger mode is for ledger, a plain text accounting tool.

#+begin_src emacs-lisp
  (use-package ledger-mode
    :init
    (setq ledger-clear-whole-transactions 1)
    :config
    (add-to-list 'evil-emacs-state-modes 'ledger-report-mode)
    :custom
    (ledger-reports
     '(("bal" "%(binary) --strict -f ~/org/PTA/keep.ledger bal")))
    (ledger-accounts-file "~/org/PTA/accounts.ledger")
    :mode "\\.ledger\\'")
#+end_src

* Profiling

#+begin_src emacs-lisp
(defun mine/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                   (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'mine/display-startup-time)
#+end_src
